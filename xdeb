#!/bin/sh

# Directories and filenames
XDEB_PKGROOT="$PWD"
XDEB_DESTDIR="$XDEB_PKGROOT/destdir"
XDEB_DATADIR="$XDEB_PKGROOT/data"
XDEB_BINPKGS="$XDEB_PKGROOT/binpkgs"
XDEB_SHLIBS="$XDEB_PKGROOT/shlibs"

# Options
XDEB_OPT_DEPS=false
XDEB_OPT_SYNC=false
XDEB_OPT_QUIT=false
XDEB_OPT_EXTRACT=true
XDEB_OPT_CLEAN_DIR=false

clean () {
	rm -rf ./*.xbps-pkg-*
	rm -rf "$XDEB_DESTDIR"
	rm -rf "$XDEB_DATADIR"

	rm -rf control.tar.?z
	rm -rf data.tar.?z
	rm -rf "debian-binary"
}

clean_repodata () {
	rm -rf "$XDEB_BINPKGS"/*-repodata
}

clean_all () {
	clean
	rm -rf "$XDEB_BINPKGS"
	rm -rf "$XDEB_SHLIBS"
}

autodeps () {
	find "$XDEB_DESTDIR" -type f -name "*.so" | while read -r file; do
		dependency="$(grep -m 1 -Po "^$(basename "$file") \K.*" "$XDEB_SHLIBS")"
		if [ -n "$dependency" ]; then
			rm -rf "$file"
			printf "%s " "$dependency"
		fi
	done
}

help () {
	echo "usage: xdeb [-S] [-d] [-Sd] ... FILE"
	echo "  -d            # Automatic dependencies. Not advised for electron packages"
	echo "  -S            # Sync runtime dependency file"
	echo "  -h            # Show this page"
	echo "  -c            # Clean everything except shlibs and binpkgs"
	echo "  -r            # Clean repodata (Use when rebuilding a package)"
	echo "  -q            # Don't build the package at all"
	echo "  -C            # Clean all files"
	echo "  -b            # No extract, just build files in destdir"
	echo "  -e            # Remove empty directories"
	echo;
	echo "example:"
	echo "  xdeb -Cq      # Remove all files and quit"
	echo "  xdeb -Sd FILE # Sync depdendency list and create package"
}

for arg in "$@"; do
	# Does the current argument start with a dash
	rest="${arg#?}"
	first="${arg%"$rest"}"
	tmp="$rest"
	if [ "${first}" != "-" ]; then break; fi

	while [ -n "$tmp" ]; do
		rest="${tmp#?}"
		first="${tmp%"$rest"}"
		
		case "$first" in
			S)
				XDEB_OPT_SYNC=true;;
			d)
				XDEB_OPT_DEPS=true;;
			h)
				help
				exit 0;;
			c)
				clean;;
			C)
				clean_all;;
			r)
				clean_repodata;;
			q)
				XDEB_OPT_QUIT=true;;
			b)
				XDEB_OPT_EXTRACT=false;;
			e)
				XDEB_OPT_CLEAN_DIR=true;;
			*)
				echo "! Unknown option -${first}"
				help
				exit 1;;
		esac

		tmp="$rest"
	done
done

if [ $XDEB_OPT_SYNC = true ]; then
	curl -sSL "https://raw.githubusercontent.com/void-linux/void-packages/master/common/shlibs" > shlibs
	echo "> Synced shlibs"
fi

if { test $XDEB_OPT_DEPS = true && test ! -r "$XDEB_SHLIBS"; }; then
	echo "! Sync atleast once, before using the depencency option"
	exit 1
fi

# Quit after parsing every argument argument
if [ $XDEB_OPT_QUIT = true ]; then exit 0; fi

# find last argument
for XDEB_BASEPKG in "$@"; do true; done

if [ $XDEB_OPT_EXTRACT = true ]; then
	# Does the filename end with .deb? Is the file readable?
	echo "$XDEB_BASEPKG" | grep -q "\.deb$"
	if { test ! $? -eq 0 || test ! -r "$XDEB_BASEPKG"; }; then
		echo "! Last argument has to point to an existing deb package"
		exit 1
	fi

	clean
	mkdir -p "$XDEB_BINPKGS"
	mkdir -p "$XDEB_DATADIR"
	mkdir -p "$XDEB_DESTDIR"

	# Extract the packages
	ar -xf "$XDEB_BASEPKG"
	tar -xf control.tar.?z -C "$XDEB_DATADIR"
	tar -xf data.tar.?z -C "$XDEB_DESTDIR"

	echo "> Extracted files"
fi

# The variable names are the same as in the regular xbps-src package build
pkgname=$(grep -Po "Package:[ \t]*\K.*" "$XDEB_DATADIR/control")
version=$(grep -Po "Version:[ \t]*\K.*" "$XDEB_DATADIR/control")
license=$(grep -Po "License:[ \t]*\K.*" "$XDEB_DATADIR/control")
archs=$(grep -Po "Architecture:[ \t]*\K.*" "$XDEB_DATADIR/control")
maintainer=$(grep -Po "Maintainer:[ \t]*\K.*" "$XDEB_DATADIR/control")
short_desc=$(grep -Po "Description:[ \t]*\K.*" "$XDEB_DATADIR/control")
long_desc=$(grep -Pzo "Description:[ \t\n]*\K.*" "$XDEB_DATADIR/control")

# It seems that debian packages don't have to provide a short_desc (XMind-ZEN didn't do it)
if [ -z "$short_desc" ]; then short_desc=$long_desc; fi

version=$(echo "$version" | grep -Po "^(\d|\.)*")
case "$archs" in
	amd64) archs="x86_64"
esac

if [ $XDEB_OPT_DEPS = true ]; then
	XDEP_DEPENDENCIES="$(autodeps)"
	echo "> Resolved dependencies ($XDEP_DEPENDENCIES)"
fi

echo "> 'Parsed' deb control file"

find "$XDEB_DESTDIR" | while read -r file; do
	# Remove empty directories
	if [ $XDEB_OPT_CLEAN_DIR = true ]; then
		if [ ! "$(ls -A "$file")" ]; then
			rm -rf "$file"
			echo "> Removed empty directory $file"
			continue
		fi
	fi

 # Check for conflicts
	file_root="$(echo "$file" | tail -c $((${#XDEB_DESTDIR}-${#file}-1)))"
	if { test -e "$file_root" && { test -f "$file" || test -L "$file_root"; }; }; then
		echo '\033[31;1m! This package conflicts with another package on your system\033[0m'
		echo " | Consider removing $file and rebuilding with '-rb' flags"
		echo " | 'xlocate $file_root' to find out which one"
	fi
done

cd "$XDEB_BINPKGS" || exit
xbps-create -q -A "$archs" -n "$pkgname-${version}_1" -m "$maintainer" -s "$short_desc" -S "$long_desc" -l "$license" -D "$XDEP_DEPENDENCIES" "$XDEB_DESTDIR"
echo "> Created Package"
xbps-rindex -a ./*.xbps
echo "> Indexed package"
